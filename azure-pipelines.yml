trigger:
  branches:
    include:
      - main
  tags:
    include:
      - v*.*
pr:
- main

variables:
  buildNumber: $[counter(variables['build.reason'], 1000)]

stages:
- stage: Build
  jobs:
    - job: SharpGenTools_Windows
      pool:
        vmImage: 'windows-2022'
      strategy:
        matrix:
          Debug:
            Config: 'Debug'
          Release:
            Config: 'Release'
      variables:
        - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
          value: "true"
        - name: DOTNET_ROLL_FORWARD
          value: "Major"
        - name: ReleaseVersion
          value: ''
        - name: ContinuousIntegrationBuild
          value: true
        - group: SharpGenTools
      steps:
        - pwsh: |
            if ($env:SourceBranch -match 'refs/tags/v(?<Version>.+)')
            {
              Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$($Matches.Version)"
            }
          displayName: 'Get Release Name (if this is a tag-triggered build)'
          env:
            SourceBranch : '$(Build.SourceBranch)'
        - pwsh: |
            $env:MSBuildEnableWorkloadResolver=$false
            dotnet tool restore
          displayName: 'Restore .NET tools'
        - pwsh: ./build.ps1 -Configuration $(Config)
          displayName: 'Build and test'
          env:
            ReleaseTag: '$(ReleaseVersion)'
            BuildNumber: '$(buildNumber)'
        - task: PublishTestResults@2
          displayName: 'Publish unit test results'
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '*.trx'
            buildConfiguration: '$(Config)'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/test-results'
        - pwsh: dotnet reportgenerator -reports:"artifacts\coverage\*.xml" -targetdir:"artifacts\reports" -reporttypes:Cobertura -title:SharpGen
          condition: eq(variables['Config'], 'Debug')
          displayName: 'Merge coverage reports'
        - task: PublishCodeCoverageResults@1
          condition: eq(variables['Config'], 'Debug')
          displayName: 'Publish code coverage results'
          inputs:
            summaryFileLocation: '$(Build.SourcesDirectory)/artifacts/reports/*.xml'
            codeCoverageTool: Cobertura
        - task: CopyFiles@2
          condition: eq(variables['Config'], 'Release')
          displayName: 'Copy NuGet packages to Artifact staging directory'
          inputs:
            contents: 'Sharp*/bin/Release/Sharp*@(.nupkg|.snupkg)'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
            flattenFolders: true
        - task: CopyFiles@2
          condition: eq(variables['Config'], 'Release')
          displayName: 'Copy SharpGen.Runtime.COM NuGet packages to Artifact staging directory'
          inputs:
            contents: 'SharpGen.Runtime.COM/SharpGen.Runtime.COM/bin/Release/Sharp*@(.nupkg|.snupkg)'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
            flattenFolders: true            
        - task: PublishBuildArtifacts@1
          condition: eq(variables['Config'], 'Release')
          displayName: Publish NuGet Packages
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: NuGet Packages
- stage: Deploy
  condition: or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  dependsOn: Build
  jobs:
    - job: MyGet_Deploy
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      pool:
        vmImage: 'windows-2022'
      steps:
        - checkout: none
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGet Packages'
            downloadPath: '$(Build.ArtifactStagingDirectory)'
        - task: NuGetCommand@2
          inputs:
            command: 'push'
            nugetFeedType: 'external'
            publishFeedCredentials: 'MyGet'
    - job: NuGet_Deploy
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      pool:
        vmImage: 'windows-2022'
      steps:
        - checkout: none
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGet Packages'
            downloadPath: '$(Build.ArtifactStagingDirectory)'
        - task: NuGetCommand@2
          inputs:
            command: 'push'
            nugetFeedType: 'external'
            publishFeedCredentials: 'NuGet'
